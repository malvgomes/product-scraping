// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/scraper/scraper.go

// Package scraper_mock is a generated GoMock package.
package scraper_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScraper is a mock of Scraper interface.
type MockScraper struct {
	ctrl     *gomock.Controller
	recorder *MockScraperMockRecorder
}

// MockScraperMockRecorder is the mock recorder for MockScraper.
type MockScraperMockRecorder struct {
	mock *MockScraper
}

// NewMockScraper creates a new mock instance.
func NewMockScraper(ctrl *gomock.Controller) *MockScraper {
	mock := &MockScraper{ctrl: ctrl}
	mock.recorder = &MockScraperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScraper) EXPECT() *MockScraperMockRecorder {
	return m.recorder
}

// ScrapeURL mocks base method.
func (m *MockScraper) ScrapeURL(host, productURL string) (string, string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrapeURL", host, productURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(string)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// ScrapeURL indicates an expected call of ScrapeURL.
func (mr *MockScraperMockRecorder) ScrapeURL(host, productURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrapeURL", reflect.TypeOf((*MockScraper)(nil).ScrapeURL), host, productURL)
}
